name: Run Python script to prepare the dataset for training
# - How to Run Python Scripts in GitHub Action Workflows, Data Engineering With Nick, 1.43K subscribers
#   https://www.youtube.com/watch?v=zk4bSTD8uWM

on:
  push:
    branches:
      - xxx
    paths:
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
      # This workflow file will run for push event that includes a file in the src folder or its sub-folders.
      - src/**
      # This workflow file will run for push event that includes a file in the data folder or its sub-folders.
      - data/**
  workflow_dispatch:
    inputs:
      target_env:
          type: environment
          description: Select the environment
      action:
          type: choice
          options:
              - prepare
              - train-build
          description: Select the action, whether to prepare or train-build the ML model.

jobs:
  pre-action-step:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4
      - name: print environment and action
        run: | 
          echo "env selected is ${{ inputs.target_env }}"
          echo "action selected is ${{ inputs.action }}"
  
  prepare-train-build:
    environment: ${{ inputs.target_env }}
    needs: [pre-action-step]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - name: Setup Python 3.12.
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' 

      - name: Install Python Dependencies.
        run: |
          # python -m pip install --upgrade . botocore boto3 awscli
          echo "Install Python Dependencies."
          python -m pip install -r requirements.txt

      - name: Run python src/prepare.py.
        run: |
          if [ "${{ inputs.action }}" = "prepare" ]; then
            echo "Run python src/prepare.py."
            echo "Generated new file for dataset."
            python src/prepare.py
          elif [ "${{ inputs.action }}" = "train-build" ]; then
            echo "Run python src/train_build.py."
            echo "Generated new model file."
            python src/train_build.py
          fi
  
  train-build-multi:
    environment: ${{ inputs.target_env }}
    needs: [pre-action-step]
    runs-on: ${{ matrix.os }}
    strategy:
      # By default, jobs are run in parallel. max-parallel=1 means the job will be run
      # sequentially.
      max-parallel: 1
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # os: [ubuntu-latest]
        python-version: ['3.9', '3.10', '3.11']
        # python-version: ['3.11']
        # If false, that means we continue to run other versions even if one of the versions
        # failed to run. If true, stop the job as soon as one of the run failed.
        fail-fast: [false]
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - name: Setup Python Version ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        id: setuppython
        with:
          python-version: ${{ matrix.python-version }}
        
      - uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          # runner.os will return Linux, Windows or macOS.
          # env.pythonLocation will return:
          # - /opt/hostedtoolcache/Python/3.11.9/x64 for Linux.
          # - C:\hostedtoolcache\windows\Python\3.9.13\x64 for Windows.
          # - /Users/runner/hostedtoolcache/Python/3.9.13/arm64 for MacOS.
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}-test1
          # key: ${{ runner.os }}-python-${{ github.run_id }}-${{ hashFiles('requirements.txt') }}-test1

      - name: Install Python Dependencies.
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "runner.os is ${{ runner.os }}"
          echo "env.pythonLocation is ${{ env.pythonLocation }}"
          echo "github.run_id is ${{ github.run_id }}"
          echo "hashFiles('requirements.txt') is ${{ hashFiles('requirements.txt') }}"
          python -m pip install -r requirements.txt
        # For the first run, the key is not generated in the cache and the If statement evaluates to != true.
        # Hence, we will install the dependent packages.
        # For subsequent runs, the key exists in the cache and so the If statement evaluates to != false.
        # In other words, the dependent packages will not be installed again.

      - name: Run Python Script.
        run: |
          echo "Run Python Script."
          python src/prepare.py
    if: 0 == 1

  build-and-push-image-to-docker-hub:
    environment: ${{ inputs.target_env }}
    needs: [pre-action-step]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - name: Login to Docker Hub.
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx.
        uses: docker/setup-buildx-action@v3

      - name: Build And Push Image To Docker Hub.
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ml-model:latest, ${{ secrets.DOCKERHUB_USERNAME }}/ml-model:${{ github.run_number }}
    if: ${{ inputs.action }} = 'train-build'

  login-to-ecr:
    environment: ${{ inputs.target_env }}
    runs-on: ubuntu-latest
    steps:
      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          # This statement for public repositories.
          # registry: public.ecr.aws
          # This statement for private repositories.
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    if: 0 == 1
